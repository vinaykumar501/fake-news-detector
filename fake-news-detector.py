# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AQGGogoP-iMPjkx6UrAn_r7jYWwrsWSV
"""

from google.colab import files
upload_files=files.upload()

import pandas as pd;
fake=pd.read_csv("Fake.csv")
true=pd.read_csv("True.csv")

fake["label"]=0
true["label"]=1

fake.head()

true.head()

data=pd.concat([true,fake],ignore_index=True)
data.head()

data=data[['title','text','label']]
data.head()

data.isnull()

data.isnull().sum()

data.dropna(inplace=True)

data["content"]=data['title']+' '+data['text']
data.head()

X = data['content']
y = data['label']

import re
def clean(text):
  text=text.lower();
  text=re.sub(r"http\S+", "", text);
  text = re.sub(r"[^a-zA-Z ]", "", text)  # keep only letters
  return text

X = X.apply(clean)
print(X)

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf = TfidfVectorizer(stop_words='english', max_df=0.7)
X_tfidf = tfidf.fit_transform(X)
print(X_tfidf)

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X_tfidf, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import MultinomialNB
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

models = {
    "Logistic Regression": LogisticRegression(),
    "Naive Bayes": MultinomialNB(),
    "Random Forest": RandomForestClassifier(),
    "SVM": LinearSVC()
}

for name, model in models.items():
    model.fit(X_train, y_train)
    predictions = model.predict(X_test)
    acc = accuracy_score(y_test, predictions)

    print(f"\n{name} Accuracy: {acc:.4f}")

    # Confusion Matrix
    cm = confusion_matrix(y_test, predictions)
    plt.figure(figsize=(4, 3))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Fake', 'True'], yticklabels=['Fake', 'True'])
    plt.title(f"{name} Confusion Matrix")
    plt.xlabel("Predicted Label")
    plt.ylabel("True Label")
    plt.tight_layout()
    plt.show()

import joblib

# Save the model
joblib.dump(models['SVM'], 'svm_model.pkl')

from google.colab import files
files.download('svm_model.pkl')

joblib.dump(tfidf, 'tfidf_vectorizer.pkl')
files.download('tfidf_vectorizer.pkl')

def predict_news(text):
    # Transform text using the saved TF-IDF vectorizer
    text = clean(text)
    text_tfidf = tfidf.transform([text])

    # Predict using the trained SVM model
    prediction = models['SVM'].predict(text_tfidf)

    return "Real News ✅" if prediction[0] == 1 else "Fake News ❌"

print(predict_news("Mexico to review need for tax changes after U.S. reform-document."))

print(predict_news("Banks, healthcare service firms among winners from U.S. tax bill"))

print(predict_news(" Donald Trump Sends Out Embarrassing New Yearâ€™s Eve Message; This is Disturbing"))